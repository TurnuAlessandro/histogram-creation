{"ast":null,"code":"/* hexToComplimentary : Converts hex value to HSL, shifts\n * hue by 180 degrees and then converts hex, giving complimentary color\n * as a hex value\n * @param  [String] hex : hex value  \n * @return [String] : complimentary color as hex value\n */\n//https://stackoverflow.com/a/37657940\nfunction hexToComplimentary(hex) {\n  var rgb = 'rgb(' + (hex = hex.replace('#', '')).match(new RegExp('(.{' + hex.length / 3 + '})', 'g')).map(function (l) {\n    return parseInt(hex.length % 2 ? l + l : l, 16);\n  }).join(',') + ')'; // Get array of RGB values\n\n  rgb = rgb.replace(/[^\\d,]/g, '').split(',');\n  var r = rgb[0] / 255.0,\n      g = rgb[1] / 255.0,\n      b = rgb[2] / 255.0;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h,\n      s,\n      l = (max + min) / 2.0;\n\n  if (max == min) {\n    h = s = 0; //achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2.0 - max - min) : d / (max + min);\n\n    if (max == r && g >= b) {\n      h = 1.0472 * (g - b) / d;\n    } else if (max == r && g < b) {\n      h = 1.0472 * (g - b) / d + 6.2832;\n    } else if (max == g) {\n      h = 1.0472 * (b - r) / d + 2.0944;\n    } else if (max == b) {\n      h = 1.0472 * (r - g) / d + 4.1888;\n    }\n  }\n\n  h = h / 6.2832 * 360.0 + 0; // Shift hue to opposite side of wheel and convert to [0-1] value\n\n  h += 180;\n\n  if (h > 360) {\n    h -= 360;\n  }\n\n  h /= 360;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  r = Math.round(r * 255);\n  g = Math.round(g * 255);\n  b = Math.round(b * 255); // Convert r b and g values to hex\n\n  rgb = b | g << 8 | r << 16;\n  return \"#\" + (0x1000000 | rgb).toString(16).substring(1);\n}\n\nexport default hexToComplimentary;\n\nfunction getCorrectTextColor(hex) {\n  /*\n  From this W3C document: http://www.webmasterworld.com/r.cgi?f=88&d=9769&url=http://www.w3.org/TR/AERT#color-contrast\n   Color brightness is determined by the following formula:\n  ((Red value X 299) + (Green value X 587) + (Blue value X 114)) / 1000\n  I know this could be more compact, but I think this is easier to read/explain.\n   */\n  let threshold = 130;\n  /* about half of 256. Lower threshold equals more dark text on dark background  */\n\n  let hRed = hexToR(hex);\n  let hGreen = hexToG(hex);\n  let hBlue = hexToB(hex);\n\n  function hexToR(h) {\n    return parseInt(cutHex(h).substring(0, 2), 16);\n  }\n\n  function hexToG(h) {\n    return parseInt(cutHex(h).substring(2, 4), 16);\n  }\n\n  function hexToB(h) {\n    return parseInt(cutHex(h).substring(4, 6), 16);\n  }\n\n  function cutHex(h) {\n    return h.charAt(0) == \"#\" ? h.substring(1, 7) : h;\n  }\n\n  let cBrightness = (hRed * 299 + hGreen * 587 + hBlue * 114) / 1000;\n\n  if (cBrightness > threshold) {\n    return \"#000000\";\n  } else {\n    return \"#ffffff\";\n  }\n} //test colortable\n\n\nvar colPairs = new Array(\"00\", \"22\", \"44\", \"66\", \"99\", \"aa\", \"cc\", \"ff\");\n\nfor (i = 0; i < colPairs.length; i++) {\n  for (j = 0; j < colPairs.length; j++) {\n    for (k = 0; k < colPairs.length; k++) {\n      //build a hexcode\n      theColor = \"#\" + colPairs[i] + colPairs[j] + colPairs[k]; //checkf for correct textcolor in passed hexcode\n\n      textcolor = getCorrectTextColor(theColor); //output div\n\n      document.write(\"<div style='background-color:\" + theColor + \";color:\" + textcolor + \";' class='colorblock'>\" + theColor + \"</div>\");\n    }\n\n    document.write(\"<br/>\");\n  }\n}","map":{"version":3,"sources":["/Users/alessandroturnu/Documents/GitHub/histogram-creation/src/utils/hexToComplimentary.js"],"names":["hexToComplimentary","hex","rgb","replace","match","RegExp","length","map","l","parseInt","join","split","r","g","b","max","Math","min","h","s","d","hue2rgb","p","q","t","round","toString","substring","getCorrectTextColor","threshold","hRed","hexToR","hGreen","hexToG","hBlue","hexToB","cutHex","charAt","cBrightness","colPairs","Array","i","j","k","theColor","textcolor","document","write"],"mappings":"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","sourcesContent":["/* hexToComplimentary : Converts hex value to HSL, shifts\n * hue by 180 degrees and then converts hex, giving complimentary color\n * as a hex value\n * @param  [String] hex : hex value  \n * @return [String] : complimentary color as hex value\n */\n//https://stackoverflow.com/a/37657940\nfunction hexToComplimentary(hex){\n\n    var rgb = 'rgb(' + (hex = hex.replace('#', '')).match(new RegExp('(.{' + hex.length/3 + '})', 'g')).map(function(l) { return parseInt(hex.length%2 ? l+l : l, 16); }).join(',') + ')';\n\n    // Get array of RGB values\n    rgb = rgb.replace(/[^\\d,]/g, '').split(',');\n\n    var r = rgb[0]/255.0, g = rgb[1]/255.0, b = rgb[2]/255.0;\n\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2.0;\n\n    if(max == min) {\n        h = s = 0;  //achromatic\n    } else {\n        var d = max - min;\n        s = (l > 0.5 ? d / (2.0 - max - min) : d / (max + min));\n\n        if(max == r && g >= b) {\n            h = 1.0472 * (g - b) / d ;\n        } else if(max == r && g < b) {\n            h = 1.0472 * (g - b) / d + 6.2832;\n        } else if(max == g) {\n            h = 1.0472 * (b - r) / d + 2.0944;\n        } else if(max == b) {\n            h = 1.0472 * (r - g) / d + 4.1888;\n        }\n    }\n\n    h = h / 6.2832 * 360.0 + 0;\n\n    // Shift hue to opposite side of wheel and convert to [0-1] value\n    h+= 180;\n    if (h > 360) { h -= 360; }\n    h /= 360;\n\n    if(s === 0){\n        r = g = b = l; // achromatic\n    } else {\n        var hue2rgb = function hue2rgb(p, q, t){\n            if(t < 0) t += 1;\n            if(t > 1) t -= 1;\n            if(t < 1/6) return p + (q - p) * 6 * t;\n            if(t < 1/2) return q;\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n            return p;\n        };\n\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    r = Math.round(r * 255);\n    g = Math.round(g * 255);\n    b = Math.round(b * 255);\n\n    // Convert r b and g values to hex\n    rgb = b | (g << 8) | (r << 16);\n    return \"#\" + (0x1000000 | rgb).toString(16).substring(1);\n}\n\nexport default hexToComplimentary;\n\n\n\n\n\n\n\n\nfunction getCorrectTextColor(hex){\n\n    /*\n    From this W3C document: http://www.webmasterworld.com/r.cgi?f=88&d=9769&url=http://www.w3.org/TR/AERT#color-contrast\n\n    Color brightness is determined by the following formula:\n    ((Red value X 299) + (Green value X 587) + (Blue value X 114)) / 1000\n\nI know this could be more compact, but I think this is easier to read/explain.\n\n    */\n\n    let threshold = 130; /* about half of 256. Lower threshold equals more dark text on dark background  */\n\n    let hRed = hexToR(hex);\n    let hGreen = hexToG(hex);\n    let hBlue = hexToB(hex);\n\n\n    function hexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\n    function hexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\n    function hexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\n    function cutHex(h) {return (h.charAt(0)==\"#\") ? h.substring(1,7):h}\n\n    let cBrightness = ((hRed * 299) + (hGreen * 587) + (hBlue * 114)) / 1000;\n    if (cBrightness > threshold){return \"#000000\";} else { return \"#ffffff\";}\n}\n\n\n\n\n//test colortable\nvar colPairs = new Array(\"00\",\"22\",\"44\",\"66\",\"99\",\"aa\",\"cc\",\"ff\");\n\nfor(i=0;i<colPairs.length;i++){\n    for(j=0;j<colPairs.length;j++){\n        for(k=0;k<colPairs.length;k++){\n            //build a hexcode\n            theColor = \"#\"+colPairs[i]+colPairs[j]+colPairs[k];\n\n            //checkf for correct textcolor in passed hexcode\n            textcolor = getCorrectTextColor(theColor);\n\n            //output div\n            document.write(\"<div style='background-color:\" + theColor + \";color:\"+textcolor+\";' class='colorblock'>\" + theColor + \"</div>\");\n        }\n        document.write(\"<br/>\");\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}