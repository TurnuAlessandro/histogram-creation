{"ast":null,"code":"var _jsxFileName = \"/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\nimport * as d3 from 'd3';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const svgWidth = 1000;\n  const svgHeight = 300;\n  const [data, setData] = useState([{\n    value: 80,\n    color: getRandomColor()\n  }, {\n    value: 110,\n    color: getRandomColor()\n  }, {\n    value: 140,\n    color: getRandomColor()\n  }, {\n    value: 200,\n    color: getRandomColor()\n  }, {\n    value: 140,\n    color: getRandomColor()\n  }, {\n    value: 110,\n    color: getRandomColor()\n  }, {\n    value: 80,\n    color: getRandomColor()\n  }]);\n  const [width, setWidth] = useState(svgWidth);\n  const containerRef = useRef(null);\n  /*\n    useEffect(() => {\n      function updateWidth() {\n        setWidth(svgWidth / (data.length + 1));\n      }\n      const handleResize = debounce(updateWidth, 500);\n      updateWidth();\n      window.addEventListener('resize', handleResize);\n      console.log(\"resizing\");\n      return () => window.removeEventListener('resize', handleResize);\n    }, [data.length]);*/\n\n  useLayoutEffect(() => {\n    if (Array.isArray(data)) {\n      const histogram = select('svg').selectAll('rect').data(data);\n      histogram.enter().append('rect').merge(histogram).attr('x', (_, i) => i * width / (data.length + 1) + 100 / data.length).attr('transform', d => `translate(0,${svgHeight - d.value * 300 / svgHeight})`) // per allinearli tutti verso il basso\n      .attr(\"width\", (width - 100) / (data.length + 1)).attr(\"height\", d => d.value * 300 / svgHeight).attr('fill', d => d.color).on('mouseenter', (actual, i) => {\n        select(this).attr('opacity', 0.6);\n      }).on('mouseleave', (actual, i) => {\n        select(this).attr('opacity', 1);\n      }).on('click', (actual, i) => alert(\"Hai cliccato il n\" + actual.value.value + \", \" + actual.color));\n      console.log(data);\n      histogram.exit().remove();\n    }\n  }, [data, width]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setData(d => [...d, {\n          value: Math.floor(Math.random() * 100),\n          color: getRandomColor()\n        }]);\n      },\n      children: \"ciaoo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.map(i => i.value + \", \")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"e9/OYpZWn+Fq+JxtVm1eBqE4fHc=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js"],"names":["React","useRef","useState","useLayoutEffect","useEffect","debounce","d3","select","getRandomColor","App","svgWidth","svgHeight","data","setData","value","color","width","setWidth","containerRef","Array","isArray","histogram","selectAll","enter","append","merge","attr","_","i","length","d","on","actual","alert","console","log","exit","remove","Math","floor","random","map"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\nimport * as d3 from 'd3';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\n\nfunction App() {\n  const svgWidth = 1000;\n  const svgHeight = 300;\n  const [data, setData] = useState([\n      {value: 80, color: getRandomColor()},\n      {value: 110, color: getRandomColor()},\n      {value: 140, color: getRandomColor()},\n      {value: 200, color: getRandomColor()},\n      {value: 140, color: getRandomColor()},\n      {value: 110, color: getRandomColor()},\n      {value: 80, color: getRandomColor()}\n      ]);\n  const [width, setWidth] = useState(svgWidth);\n  const containerRef = useRef(null);\n/*\n  useEffect(() => {\n    function updateWidth() {\n      setWidth(svgWidth / (data.length + 1));\n    }\n    const handleResize = debounce(updateWidth, 500);\n    updateWidth();\n    window.addEventListener('resize', handleResize);\n    console.log(\"resizing\");\n    return () => window.removeEventListener('resize', handleResize);\n  }, [data.length]);*/\n\n  useLayoutEffect(() => {\n    if (Array.isArray(data)) {\n      const histogram = select('svg').selectAll('rect').data(data);\n\n      histogram\n          .enter()\n          .append('rect')\n          .merge(histogram)\n          .attr('x', (_, i) => i * width/(data.length+1) + (100/data.length))\n          .attr('transform', d => `translate(0,${svgHeight-(d.value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n          .attr(\"width\", (width-100) / (data.length + 1))\n          .attr(\"height\", d => d.value * 300 / svgHeight)\n          .attr('fill', d => d.color)\n          .on('mouseenter', (actual, i) => {\n              select(this).attr('opacity', 0.6)\n          })\n          .on('mouseleave', (actual, i) => {\n                select(this).attr('opacity', 1)\n          })\n          .on('click', (actual, i) => alert(\"Hai cliccato il n\" + actual.value.value + \", \" + actual.color))\n      console.log(data);\n      histogram.exit().remove();\n    }\n  }, [data, width]);\n\n  return (\n      <>\n\n        <svg width={svgWidth} height={svgHeight} ref={containerRef}>\n\n        </svg>\n        <button\n          onClick={() => {\n            setData(d => [...d, {\n              value: Math.floor(Math.random() * 100),\n              color: getRandomColor()\n            }])\n          }}>\n            ciaoo\n        </button>\n        <div>\n          {data.map(i => i.value + \", \")}</div>\n      </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}