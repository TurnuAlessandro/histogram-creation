{"ast":null,"code":"var _jsxFileName = \"/Users/alessandroturnu/Documents/GitHub/histogram-creation/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction element(uuid) {\n  return {\n    uuid,\n    value: Math.floor(Math.random() * 100 + 20),\n    // +20 per evitare la presenza di zeri\n    color: getRandomColor()\n  };\n}\n\nconst transitionDuration = 1000;\n\nfunction App() {\n  _s();\n\n  const svgWidth = 1000;\n  const svgHeight = 600;\n  const [dataMap, setDataMap] = useState(new Map());\n  const containerRef = useRef(null);\n  useEffect(() => {\n    let initialMap = new Map(dataMap);\n    let id = 0;\n    d3.range(10).map(x => {\n      id = uuidv4();\n      initialMap.set(id, element(id));\n    });\n    setDataMap(initialMap);\n  }, []);\n  useLayoutEffect(() => {\n    let data = [...dataMap.values()];\n\n    if (Array.isArray(data)) {\n      let margin = {\n        top: 40,\n        right: 30,\n        bottom: 30,\n        left: 40\n      };\n      let width = svgWidth - margin.left - margin.right;\n      let height = svgHeight - margin.top - margin.bottom;\n      let maxYvalue = d3.max(data, d => d.value);\n      d3.select('#histogram svg').remove();\n      let svg = d3.select(\"#histogram\").append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.bottom + margin.top).append('g').attr('transform', `translate(${margin.left},${margin.top})`); // X axis: scale and draw:\n\n      var x = d3.scaleLinear().domain([0, 100]) // axis y range\n      .range([0, width]); //data.lenght]); // axis x range\n\n      var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\");\n      xAxis.call(d3.axisBottom(x)); // Y axis: scale and draw:\n\n      var y = d3.scaleLinear().range([0, height]).domain([d3.max(data, d => d.value), 0]);\n      let yAxis = svg.append(\"g\");\n      yAxis.call(d3.axisLeft(y));\n      let translateX = width / data.length;\n      let histogram = svg.selectAll('rect').data(data).enter().append('rect').attr('x', (_, i) => i * translateX).attr('y', (d, i) => y(d.value)).attr('width', width / (data.length > 0 ? data.length : 1)).attr('value', d => d.value).attr('height', function (d) {\n        return height - y(d.value);\n      }).style('fill', d => d.color).on('mouseenter', function (actual, i) {\n        d3.select(this).attr('opacity', 0.6);\n      }).on('mouseleave', function (actual, i) {\n        d3.select(this).attr('opacity', 1);\n      }).on('click', function (actual, data) {\n        var response = prompt(\"Change value:\", data.value);\n\n        if (response == null || response == \"\") {\n          alert(\"You cancelled the prompt.\");\n          return;\n        }\n\n        if (!isNaN(response)) {\n          let updateValue = (d3element, newValue) => {\n            let oldValue = parseFloat(d3.select(d3element).attr('value'));\n            let value = parseFloat(response);\n            setTimeout(() => {\n              if (value > maxYvalue) {\n                // here the user changes the value with a value grater then the max value\n                // update y axis value (scale domain)\n                y.domain([value, 0]);\n                yAxis.transition().duration(transitionDuration).call(d3.axisLeft(y)); // update each rect\n\n                d3.select('svg').selectAll('rect').transition().duration(transitionDuration).attr('y', d => y(d.value)).attr('height', d => height - y(d.value));\n              }\n\n              d3.select(this).transition().duration(transitionDuration).attr('y', y(value)).attr('height', height - y(value));\n            }, 0); // data update after all transition finish\n\n            setTimeout(() => {\n              setDataMap(oldMap => {\n                let newMap = new Map(oldMap);\n                newMap.set(data.uuid, {\n                  uuid: data.uuid,\n                  color: data.color,\n                  value: value\n                });\n                return newMap;\n              });\n            }, transitionDuration);\n          };\n\n          return;\n        }\n\n        alert(\"Something went wrong!\");\n      }).call(d3.drag().on('start', function dragStarted() {\n        d3.select(this).attr('stroke', 'black');\n      }).on('drag', function dragged(event, d) {\n        let newX; // we need to understand where the mouse is, if it is on the first half of the element or on the second one\n\n        let elementMiddleX = parseFloat(d3.select(this).attr(\"width\")) / 2 + parseFloat(d3.select(this).attr(\"x\")); // middle x of the element dragged\n        // TODO consulta http://bl.ocks.org/AlessandraSozzi/9aff786dd04515d6b028\n\n        if (event.x < elementMiddleX) {\n          // first half\n          newX = event.x - parseFloat(d3.select(this).attr(\"width\")) / 2;\n        } else {\n          // second half\n          newX = event.x - parseFloat(d3.select(this).attr(\"width\")) / 2;\n        }\n\n        d3.select(this).raise().attr('x', newX);\n        d3.select(this).raise().attr('x', event.x);\n      }).on('end', function dragEnded() {\n        d3.select(this).attr('stroke', null); //setDataMap(new Map(dataMap))\n      }));\n      histogram.exit().remove();\n    }\n  }, [dataMap]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"histogram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setDataMap(d => {\n            let newMap = new Map(d);\n            let id = uuidv4();\n            newMap.set(id, element(id));\n            return newMap;\n          });\n        },\n        children: \"ciaoo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setDataMap(d => {\n            let newMap = new Map(d);\n            let id = uuidv4();\n            newMap.set(id, element(id));\n            return newMap;\n          });\n        },\n        children: \"ciaoo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"rxVwtXLXhQmftWatZ87YL1Qjo+g=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alessandroturnu/Documents/GitHub/histogram-creation/src/App.js"],"names":["React","useRef","useState","useLayoutEffect","useEffect","d3","getRandomColor","v4","uuidv4","element","uuid","value","Math","floor","random","color","transitionDuration","App","svgWidth","svgHeight","dataMap","setDataMap","Map","containerRef","initialMap","id","range","map","x","set","data","values","Array","isArray","margin","top","right","bottom","left","width","height","maxYvalue","max","d","select","remove","svg","append","attr","scaleLinear","domain","xAxis","call","axisBottom","y","yAxis","axisLeft","translateX","length","histogram","selectAll","enter","_","i","style","on","actual","response","prompt","alert","isNaN","updateValue","d3element","newValue","oldValue","parseFloat","setTimeout","transition","duration","oldMap","newMap","drag","dragStarted","dragged","event","newX","elementMiddleX","raise","dragEnded","exit"],"mappings":"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","sourcesContent":["\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction element(uuid){\n    return {\n        uuid,\n        value: Math.floor(Math.random() * 100 + 20), // +20 per evitare la presenza di zeri\n        color: getRandomColor()\n    };\n}\n\nconst transitionDuration = 1000;\n\nfunction App() {\n    const svgWidth = 1000;\n    const svgHeight = 600;\n\n    const [dataMap, setDataMap] = useState(new Map());\n    const containerRef = useRef(null);\n\n\n\n    useEffect(() => {\n        let initialMap = new Map(dataMap);\n        let id = 0;\n\n        d3.range(10).map(x => {\n            id = uuidv4();\n            initialMap.set(id, element(id));\n        })\n\n        setDataMap(initialMap);\n    }, []);\n\n    useLayoutEffect(() => {\n        let data = [...dataMap.values()]\n        if (Array.isArray(data)) {\n            let margin = {\n                top: 40,\n                right: 30,\n                bottom: 30,\n                left: 40\n            };\n            let width = svgWidth - margin.left - margin.right;\n            let height = svgHeight - margin.top - margin.bottom;\n\n            let maxYvalue = d3.max(data, d => d.value);\n\n            d3.select('#histogram svg').remove();\n            let svg = d3.select(\"#histogram\")\n                .append('svg')\n                .attr('width', width + margin.left + margin.right)\n                .attr('height', height + margin.bottom + margin.top)\n                .append('g')\n                .attr('transform', `translate(${margin.left},${margin.top})`)\n\n\n\n\n            // X axis: scale and draw:\n            var x = d3.scaleLinear()\n                .domain([0, 100]) // axis y range\n                .range([0, width]);//data.lenght]); // axis x range\n            var xAxis = svg.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\");\n            xAxis.call(d3.axisBottom(x));\n\n\n            // Y axis: scale and draw:\n            var y = d3.scaleLinear()\n                .range([0, height])\n                .domain([d3.max(data, d => d.value), 0])\n            let yAxis = svg.append(\"g\");\n\n            yAxis.call(d3.axisLeft(y));\n\n\n            let translateX = width / (data.length);\n\n            let histogram = svg.selectAll('rect')\n                .data(data)\n                .enter()\n                .append('rect')\n                .attr('x', (_, i) => i*translateX)\n                .attr('y', (d, i) => y(d.value))\n                .attr('width', (width) / (data.length > 0 ? data.length : 1))\n                .attr('value', d => d.value)\n                .attr('height', function(d) { return height - y(d.value); })\n                .style('fill', d => d.color)\n                .on('mouseenter', function (actual, i) {\n                    d3.select(this)\n                        .attr('opacity', 0.6)\n                })\n                .on('mouseleave', function (actual, i) {\n                    d3.select(this)\n                        .attr('opacity', 1)\n                })\n                .on('click', function(actual, data){\n                    var response = prompt(\"Change value:\", data.value);\n                    if (response == null || response == \"\") {\n                        alert(\"You cancelled the prompt.\");\n                        return;\n                    }\n                    if(!isNaN(response)){\n\n                        let updateValue = (d3element, newValue) => {\n                            let oldValue = parseFloat(d3.select(d3element).attr('value'));\n\n                            let value = parseFloat(response);\n\n                            setTimeout(() => {\n\n                                if(value > maxYvalue){ // here the user changes the value with a value grater then the max value\n                                    // update y axis value (scale domain)\n                                    y.domain([value, 0]);\n                                    yAxis.transition()\n                                        .duration(transitionDuration)\n                                        .call(d3.axisLeft(y));\n\n                                    // update each rect\n                                    d3.select('svg')\n                                        .selectAll('rect')\n                                        .transition()\n                                        .duration(transitionDuration)\n                                        .attr('y', d => y(d.value))\n                                        .attr('height', d => height - y(d.value))\n\n                                }\n                                d3.select(this)\n                                    .transition()\n                                    .duration(transitionDuration)\n                                    .attr('y', y(value))\n                                    .attr('height', height - y(value))\n                            }, 0);\n\n                            // data update after all transition finish\n                            setTimeout(() => {\n                                setDataMap(oldMap => {\n                                    let newMap = new Map(oldMap);\n                                    newMap.set(data.uuid, {\n                                        uuid: data.uuid,\n                                        color: data.color,\n                                        value: value\n                                    })\n                                    return newMap;\n                                })\n                            }, transitionDuration);\n                        }\n                        return;\n                    }\n                    alert(\"Something went wrong!\");\n                })\n                .call(d3.drag()\n                    .on('start', function dragStarted(){\n                        d3.select(this)\n                            .attr('stroke', 'black');\n                    })\n                    .on('drag', function dragged(event, d){\n\n                        let newX;\n                        // we need to understand where the mouse is, if it is on the first half of the element or on the second one\n                        let elementMiddleX = parseFloat(d3.select(this).attr(\"width\"))/2 + parseFloat(d3.select(this).attr(\"x\")); // middle x of the element dragged\n                        // TODO consulta http://bl.ocks.org/AlessandraSozzi/9aff786dd04515d6b028\n                        if(event.x < (elementMiddleX)) { // first half\n                            newX = event.x - parseFloat(d3.select(this).attr(\"width\"))/2;\n                        }\n                        else { // second half\n                            newX = event.x - parseFloat(d3.select(this).attr(\"width\"))/2;\n                        }\n                        d3.select(this)\n                            .raise()\n                            .attr('x',\n                                newX\n                            )\n                        d3\n                            .select(this)\n                            .raise()\n                            .attr('x', event.x)\n\n\n\n\n                    })\n                    .on('end', function dragEnded(){\n\n                        d3.select(this)\n                            .attr('stroke', null);\n\n\n                        //setDataMap(new Map(dataMap))\n                    })\n\n                )\n            histogram.exit().remove();\n        }\n    }, [dataMap]);\n\n    return (\n        <>\n\n            {/*<svg width={svgWidth} height={svgHeight} ref={containerRef}/>*/}\n\n            <div id=\"histogram\" />\n\n            <div >\n                <button\n                    onClick={() => {\n                        setDataMap(d => {\n                            let newMap = new Map(d);\n                            let id = uuidv4();\n                            newMap.set(id, element(id));\n                            return newMap;\n                        })\n                    }}>\n                    ciaoo\n                </button>\n                <button\n                    onClick={() => {\n                        setDataMap(d => {\n                            let newMap = new Map(d);\n                            let id = uuidv4();\n                            newMap.set(id, element(id));\n                            return newMap;\n                        })\n                    }}>\n                    ciaoo\n                </button>\n            </div>\n\n        </>\n    );\n};\n\nexport default App;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}