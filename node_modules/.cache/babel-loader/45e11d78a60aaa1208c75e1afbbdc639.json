{"ast":null,"code":"var _jsxFileName = \"/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect } from 'react';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction element(uuid) {\n  return {\n    uuid,\n    value: Math.floor(Math.random() * 100),\n    color: getRandomColor()\n  };\n}\n\nfunction App() {\n  _s();\n\n  const svgWidth = 1000;\n  const svgHeight = 300;\n  const [dataMap, setData] = useState(new Map());\n  const containerRef = useRef(null);\n  let sizeOfData = dataMap.size;\n  console.log(dataMap.size);\n  useEffect(() => {\n    let initialMap = new Map(dataMap);\n  }, []);\n  useLayoutEffect(() => {\n    let data = [...dataMap.values()];\n\n    if (Array.isArray(data)) {\n      console.log(\"ci entra\");\n      const histogram = select('svg').selectAll('rect').data(data);\n      console.log(\"Array:\", data);\n      histogram.enter().append('rect').merge(histogram).attr('x', (_, i) => i * svgWidth / (data.length + 1) + 100 / data.length).attr('transform', d => `translate(0,${svgHeight - d.value * 300 / svgHeight})`) // per allinearli tutti verso il basso\n      .attr(\"width\", (svgWidth - 100) / (data.length + 1)).attr(\"height\", d => d.value * 300 / svgHeight).attr('fill', d => d.color).on('mouseenter', function (actual, i) {\n        select(this).attr('opacity', 0.6);\n      }).on('mouseleave', function (actual, i) {\n        select(this).attr('opacity', 1);\n      }).on('click', (actual, data) => {\n        console.log(data);\n        var response = prompt(\"Change value:\", data.value);\n\n        if (response == null || response == \"\") {\n          alert(\"You cancelled the prompt.\");\n          return;\n        }\n\n        if (!isNaN(response)) {\n          let value = parseFloat(response);\n          setData(oldMap => {\n            let newMap = new Map(oldMap); //newMap.set(data)\n            // code to modify the slot\n            // gestire gli id\n\n            return newMap;\n          });\n          return;\n        }\n\n        alert(\"Something went wrong!\");\n      });\n      histogram.exit().remove();\n    }\n  }, [dataMap]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setData(d => {\n          let newMap = new Map(d);\n          newMap.set(uuidv4(), element());\n          return newMap;\n        });\n      },\n      children: \"ciaoo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [...dataMap.keys()].map(i => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: i\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 43\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"LQ+asEGH2HedXfQCKNOgXOw2q3U=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js"],"names":["React","useRef","useState","useLayoutEffect","select","getRandomColor","v4","uuidv4","element","uuid","value","Math","floor","random","color","App","svgWidth","svgHeight","dataMap","setData","Map","containerRef","sizeOfData","size","console","log","useEffect","initialMap","data","values","Array","isArray","histogram","selectAll","enter","append","merge","attr","_","i","length","d","on","actual","response","prompt","alert","isNaN","parseFloat","oldMap","newMap","exit","remove","set","keys","map"],"mappings":"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","sourcesContent":["\nimport React, { useRef, useState, useLayoutEffect } from 'react';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction element(uuid){\n        return {\n            uuid,\n            value: Math.floor(Math.random() * 100),\n            color: getRandomColor()\n        };\n}\n\nfunction App() {\n  const svgWidth = 1000;\n  const svgHeight = 300;\n\n  const [dataMap, setData] = useState(new Map());\n  const containerRef = useRef(null);\n  let sizeOfData = dataMap.size;\n\nconsole.log(dataMap.size);\n\n    useEffect(() => {\n        let initialMap = new Map(dataMap)\n    }, [])\n  useLayoutEffect(() => {\n    let data = [...dataMap.values()];\n\n    if (Array.isArray(data)) {\n        console.log(\"ci entra\");\n      const histogram = select('svg').selectAll('rect').data(data);\n    console.log(\"Array:\", data);\n      histogram\n          .enter()\n          .append('rect')\n          .merge(histogram)\n          .attr('x', (_, i) => i * svgWidth/(data.length+1) + (100/data.length))\n          .attr('transform', d => `translate(0,${svgHeight-(d.value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n          .attr(\"width\", (svgWidth-100) / (data.length + 1))\n          .attr(\"height\", d => d.value * 300 / svgHeight)\n          .attr('fill', d => d.color)\n          .on('mouseenter', function (actual, i) {\n              select(this).attr('opacity', 0.6)\n          })\n          .on('mouseleave', function (actual, i) {\n              select(this).attr('opacity', 1)\n          })\n          .on('click', (actual, data) => {\nconsole.log(data);\n              var response = prompt(\"Change value:\", data.value);\n              if (response == null || response == \"\") {\n                  alert(\"You cancelled the prompt.\");\n                  return;\n              }\n              if(!isNaN(response)){\n                  let value = parseFloat(response);\n                  setData(oldMap => {\n                      let newMap = new Map(oldMap);\n                      //newMap.set(data)\n                      // code to modify the slot\n\n\n                      // gestire gli id\n                      return newMap;\n                  })\n                  return;\n              }\n              alert(\"Something went wrong!\");\n          })\n      histogram.exit().remove();\n    }\n  }, [dataMap]);\n\n  return (\n      <>\n\n        <svg width={svgWidth} height={svgHeight} ref={containerRef} />\n\n        <button\n          onClick={() => {\n            setData(d => {\n                let newMap = new Map(d);\n                newMap.set(uuidv4(), element());\n                return newMap;\n            })\n          }}>\n            ciaoo\n        </button>\n        <div>\n            {[...dataMap.keys()].map(i => <div>{i}</div>)}</div>\n      </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}