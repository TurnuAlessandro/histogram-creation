{"ast":null,"code":"var _jsxFileName = \"/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\nimport * as d3 from 'd3';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [width, setWidth] = useState(0);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    function updateWidth() {\n      setWidth(containerRef.current.clientWidth / (data.length + 1));\n    }\n\n    const handleResize = debounce(updateWidth, 500);\n    updateWidth();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [data.length]);\n  useLayoutEffect(() => {\n    if (Array.isArray(data)) {\n      const update = select('g').selectAll('circle').data(data);\n      const histogram = select('g').selectAll('circle').data(data);\n      /*update\n          .enter()\n          .append('circle')\n          .merge(update)\n          .attr('r', (d) => d)\n          .attr('cx', (_, i) => width * (i + 1))\n          .attr('cy', () => Math.random() * 100)\n          .attr('stroke', () => getRandomColor())\n          .attr('fill', () => getRandomColor());*/\n\n      histogram.enter().append('rect').merge(histogram).attr('x', (_, i) => i).attr(\"width\", \"10px\").attr(\"height\", d => d).attr('fill', () => getRandomColor());\n      update.exit().remove();\n      histogram.exit().remove();\n    }\n  }, [data, width]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      height: \"350\",\n      ref: containerRef,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: \"translate(0, 100)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setData(d => [...d, Math.floor(Math.random() * 30)]),\n      children: \"ciaoo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.map(i => i + \", \")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"FhnZnfSHUbj6KXvzAq66ao5RdDo=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js"],"names":["React","useRef","useState","useLayoutEffect","useEffect","debounce","d3","select","getRandomColor","App","data","setData","width","setWidth","containerRef","updateWidth","current","clientWidth","length","handleResize","window","addEventListener","removeEventListener","Array","isArray","update","selectAll","histogram","enter","append","merge","attr","_","i","d","exit","remove","Math","floor","random","map"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\nimport * as d3 from 'd3';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [width, setWidth] = useState(0);\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    function updateWidth() {\n      setWidth(containerRef.current.clientWidth / (data.length + 1));\n    }\n    const handleResize = debounce(updateWidth, 500);\n    updateWidth();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [data.length]);\n\n  useLayoutEffect(() => {\n    if (Array.isArray(data)) {\n      const update = select('g').selectAll('circle').data(data);\n      const histogram = select('g').selectAll('circle').data(data);\n\n      /*update\n          .enter()\n          .append('circle')\n          .merge(update)\n          .attr('r', (d) => d)\n          .attr('cx', (_, i) => width * (i + 1))\n          .attr('cy', () => Math.random() * 100)\n          .attr('stroke', () => getRandomColor())\n          .attr('fill', () => getRandomColor());*/\n      histogram\n          .enter()\n          .append('rect')\n          .merge(histogram)\n          .attr('x', (_, i) => i)\n          .attr(\"width\", \"10px\")\n          .attr(\"height\", d => d)\n          .attr('fill', () => getRandomColor());\n\n      update.exit().remove();\n      histogram.exit().remove();\n    }\n  }, [data, width]);\n\n  return (\n      <>\n\n        <svg width=\"100%\" height=\"350\" ref={containerRef}>\n          <g transform=\"translate(0, 100)\" />\n        </svg>\n        <button\n          onClick={() => setData(d => [...d, Math.floor(Math.random()*30)])}>\nciaoo\n        </button>\n        <div>\n          {data.map(i => i + \", \")}</div>\n      </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}