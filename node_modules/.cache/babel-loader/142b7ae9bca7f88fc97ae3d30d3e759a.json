{"ast":null,"code":"var _jsxFileName = \"/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction element(uuid) {\n  return {\n    uuid,\n    value: Math.floor(Math.random() * 100 + 20),\n    // +20 per evitare la presenza di zeri\n    color: getRandomColor()\n  };\n}\n\nfunction App() {\n  _s();\n\n  const svgWidth = 1000;\n  const svgHeight = 300;\n  const [dataMap, setData] = useState(new Map());\n  const containerRef = useRef(null);\n  let sizeOfData = dataMap.size;\n  useEffect(() => {\n    let initialMap = new Map(dataMap);\n    let id = uuidv4();\n    initialMap.set(id, element(id));\n    id = uuidv4();\n    initialMap.set(id, element(id));\n    id = uuidv4();\n    initialMap.set(id, element(id));\n    setData(initialMap);\n  }, []);\n  useLayoutEffect(() => {\n    let data = [...dataMap.values()];\n\n    if (Array.isArray(data)) {\n      const histogram = select('svg').selectAll('rect').data(data);\n      histogram.enter().append('rect').merge(histogram).attr('x', (_, i) => i * svgWidth / (data.length + 1) + 100 / data.length).attr('transform', d => `translate(0,${svgHeight - d.value * 300 / svgHeight})`) // per allinearli tutti verso il basso\n      .attr(\"width\", (svgWidth - 100) / (data.length + 1)).attr(\"height\", d => d.value * 300 / svgHeight).attr('fill', d => d.color).on('mouseenter', function (actual, i) {\n        select(this).attr('opacity', 0.6);\n        let value = 100;\n      }).on('mouseleave', function (actual, i) {\n        select(this).attr('opacity', 1);\n      }).on('click', function (actual, data) {\n        let element = this;\n        var response = prompt(\"Change value:\", data.value);\n\n        if (response == null || response == \"\") {\n          alert(\"You cancelled the prompt.\");\n          return;\n        }\n\n        if (!isNaN(response)) {\n          let duration = 1000;\n          let value = parseFloat(response);\n          setTimeout(() => {\n            select(element).transition().duration(1000).attr('fill', 'red').attr('transform', d => `translate(0,${svgHeight - value * 300 / svgHeight})`) // per allinearli tutti verso il basso\n            .attr(\"height\", d => value * 300 / svgHeight);\n          }, 0);\n          setTimeout(() => {\n            setData(oldMap => {\n              let newMap = new Map(oldMap);\n              newMap.set(data.uuid, {\n                uuid: data.uuid,\n                color: data.color,\n                value: value\n              }); // code to modify the slot\n              // gestire gli id\n\n              return newMap;\n            });\n          }, duration);\n          return;\n        }\n\n        alert(\"Something went wrong!\");\n      });\n      histogram.exit().remove();\n    }\n  }, [dataMap]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setData(d => {\n          let newMap = new Map(d);\n          let id = uuidv4();\n          newMap.set(id, element(id));\n          return newMap;\n        });\n      },\n      children: \"ciaoo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [...dataMap.keys()].map(i => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: i\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 43\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"LQ+asEGH2HedXfQCKNOgXOw2q3U=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js"],"names":["React","useRef","useState","useLayoutEffect","useEffect","select","getRandomColor","v4","uuidv4","element","uuid","value","Math","floor","random","color","App","svgWidth","svgHeight","dataMap","setData","Map","containerRef","sizeOfData","size","initialMap","id","set","data","values","Array","isArray","histogram","selectAll","enter","append","merge","attr","_","i","length","d","on","actual","response","prompt","alert","isNaN","duration","parseFloat","setTimeout","transition","oldMap","newMap","exit","remove","keys","map"],"mappings":"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","sourcesContent":["\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction element(uuid){\n        return {\n            uuid,\n            value: Math.floor(Math.random() * 100 + 20), // +20 per evitare la presenza di zeri\n            color: getRandomColor()\n        };\n}\n\nfunction App() {\n  const svgWidth = 1000;\n  const svgHeight = 300;\n\n  const [dataMap, setData] = useState(new Map());\n  const containerRef = useRef(null);\n  let sizeOfData = dataMap.size;\n\n\n    useEffect(() => {\n        let initialMap = new Map(dataMap);\n        let id = uuidv4();\n        initialMap.set(id, element(id));\n        id = uuidv4();\n        initialMap.set(id, element(id));\n        id = uuidv4();\n        initialMap.set(id, element(id));\n        setData(initialMap);\n    }, []);\n\n  useLayoutEffect(() => {\n    let data = [...dataMap.values()];\n\n    if (Array.isArray(data)) {\n      const histogram = select('svg').selectAll('rect').data(data);\n      histogram\n          .enter()\n          .append('rect')\n          .merge(histogram)\n          .attr('x', (_, i) => i * svgWidth/(data.length+1) + (100/data.length))\n          .attr('transform', d => `translate(0,${svgHeight-(d.value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n          .attr(\"width\", (svgWidth-100) / (data.length + 1))\n          .attr(\"height\", d => d.value * 300 / svgHeight)\n          .attr('fill', d => d.color)\n          .on('mouseenter', function (actual, i) {\n              select(this)\n                  .attr('opacity', 0.6)\nlet value = 100;\n\n          })\n          .on('mouseleave', function (actual, i) {\n              select(this)\n                  .attr('opacity', 1)\n          })\n          .on('click', function(actual, data){\n              let element = this;\n              var response = prompt(\"Change value:\", data.value);\n              if (response == null || response == \"\") {\n                  alert(\"You cancelled the prompt.\");\n                  return;\n              }\n              if(!isNaN(response)){\n                  let duration = 1000;\n                  let value = parseFloat(response);\n\n                  setTimeout(() => {\n                      select(element)\n                          .transition()\n                          .duration(1000)\n                          .attr('fill', 'red')\n                          .attr('transform', d => `translate(0,${svgHeight-(value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n                          .attr(\"height\", d => value * 300 / svgHeight);\n                  }, 0);\n                  setTimeout(() => {\n                      setData(oldMap => {\n                          let newMap = new Map(oldMap);\n                          newMap.set(data.uuid, {\n                              uuid: data.uuid,\n                              color: data.color,\n                              value: value\n                          })\n                          // code to modify the slot\n\n\n                          // gestire gli id\n                          return newMap;\n                      })\n                  }, duration);\n\nreturn;\n              }\n              alert(\"Something went wrong!\");\n          })\n      histogram.exit().remove();\n    }\n  }, [dataMap]);\n\n  return (\n      <>\n\n        <svg width={svgWidth} height={svgHeight} ref={containerRef} />\n\n        <button\n          onClick={() => {\n            setData(d => {\n                let newMap = new Map(d);\n                let id = uuidv4();\n                newMap.set(id, element(id));\n                return newMap;\n            })\n          }}>\n            ciaoo\n        </button>\n        <div>\n            {[...dataMap.keys()].map(i => <div>{i}</div>)}</div>\n      </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}