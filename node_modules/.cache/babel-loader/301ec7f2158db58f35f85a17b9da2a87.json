{"ast":null,"code":"var _jsxFileName = \"/Users/alessandroturnu/Documents/GitHub/histogram-creation/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction element(uuid) {\n  return {\n    uuid,\n    value: Math.floor(Math.random() * 100 + 20),\n    // +20 per evitare la presenza di zeri\n    color: getRandomColor()\n  };\n}\n\nconst transitionDuration = 1000;\n\nfunction App() {\n  _s();\n\n  const svgWidth = 500;\n  const svgHeight = 300;\n  const [dataMap, setDataMap] = useState(new Map());\n  const containerRef = useRef(null); //const [data, setData] = useState(d3.range(3).map(x => Math.random()*100));\n\n  const [data, setData] = useState([10, 20, 30]);\n  /*\n      useEffect(() => {\n          let initialMap = new Map(dataMap);\n          let id = uuidv4();\n          initialMap.set(id, element(id));\n          id = uuidv4();\n          initialMap.set(id, element(id));\n          id = uuidv4();\n          initialMap.set(id, element(id));\n          setDataMap(initialMap);\n      }, [null]);\n  */\n\n  useLayoutEffect(() => {\n    console.log(data);\n\n    if (Array.isArray(data)) {\n      let margin = {\n        top: 40,\n        right: 30,\n        bottom: 30,\n        left: 40\n      };\n      let width = svgWidth - margin.left - margin.right;\n      let height = svgHeight - margin.top - margin.bottom;\n      let svg = d3.select(\"#histogram\").append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.bottom + margin.top).append('g').attr('transform', `translate(${margin.left},${margin.top})`); //const histogram = d3.select('svg').selectAll('rect').data(data);\n\n      console.log(data); // get the data\n      // X axis: scale and draw:\n\n      var x = d3.scaleLinear().domain([0, d3.max(data, d => d)]) // axis y range\n      .range([0, width]); //data.lenght]); // axis x range\n\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // set the parameters for the histogram\n\n      /* var histogram = d3.histogram()\n           .value(d => d)   // I need to give the vector of value\n           .domain(x.domain())  // then the domain of the graphic\n           .thresholds(x.ticks(data.lenght)); // then the numbers of bins*/\n      // And apply this function to data to get the bins\n      // var bins = histogram(data);\n      // Y axis: scale and draw:\n\n      var y = d3.scaleLinear().range([0, height]).domain([d3.max(data, d => d), 0]);\n      svg.append(\"g\").call(d3.axisLeft(y));\n      console.log(\"x\", x, \"y\", y); // append the bar rectangles to the svg element\n\n      let translateX = x(data[0]);\n      svg.selectAll(\"rect\") //.data(bins)\n      .data(data).enter().append(\"rect\").attr(\"x\", 1).attr(\"transform\", function (d, i) {\n        console.log(x(i), x(d));\n        return `translate(${i * translateX}, ${y(d)}`;\n      }).attr(\"width\", function (d) {\n        return x(d) - 20;\n      }).attr('value', d => d).attr(\"height\", function (d) {\n        return height - y(d);\n      }).style(\"fill\", () => getRandomColor()).attr(\"width\", width / (data.length > 0 ? data.length : 1));\n      /*\n      \n      \n            histogram\n                .enter()\n                .append('rect')\n                .merge(histogram)\n                .attr('x', (_, i) => i * svgWidth/(data.length+1) + (100/data.length))\n                .attr('transform', d => `translate(0,${svgHeight-(d.value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n                .attr(\"width\", (svgWidth-100) / (data.length + 1))\n                .attr(\"height\", d => d.value * 300 / svgHeight)\n                .attr('fill', d => d.color)\n                .on('mouseenter', function (actual, i) {\n                    d3.select(this)\n                        .attr('opacity', 0.6)\n                })\n                .on('mouseleave', function (actual, i) {\n                    d3.select(this)\n                        .attr('opacity', 1)\n                })\n                .on('click', function(actual, data){\n                    var response = prompt(\"Change value:\", data.value);\n                    if (response == null || response == \"\") {\n                        alert(\"You cancelled the prompt.\");\n                        return;\n                    }\n                    if(!isNaN(response)){\n                        let value = parseFloat(response);\n      \n                        setTimeout(() => {\n                            d3.select(this)\n                                .transition()\n                                .duration(transitionDuration)\n                                .attr('transform', d => `translate(0,${svgHeight-(value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n                                .attr(\"height\", d => value * 300 / svgHeight);\n                        }, 0);\n                        setTimeout(() => {\n                            setData(oldMap => {\n                                let newMap = new Map(oldMap);\n                                newMap.set(data.uuid, {\n                                    uuid: data.uuid,\n                                    color: data.color,\n                                    value: value\n                                })\n                                return newMap;\n                            })\n                        }, transitionDuration);\n                        return;\n                    }\n                    alert(\"Something went wrong!\");\n                })\n                .call(d3.drag()\n                        .on('start', function dragStarted(){\n                            d3.select(this)\n                                .attr('stroke', 'black');\n                        })\n                        .on('drag', function dragged(event, d){\n      \n                            let newX;\n                            // we need to understand where the mouse is, if it is on the first half of the element or on the second one\n                            let elementMiddleX = parseFloat(d3.select(this).attr(\"width\"))/2 + parseFloat(d3.select(this).attr(\"x\")); // middle x of the element dragged\n      //TODO aggiustare sfarfallamento\n                            // TODO consulta http://bl.ocks.org/AlessandraSozzi/9aff786dd04515d6b028\n                            if(event.x < (elementMiddleX)) { // first half\n                                newX = event.x - parseFloat(d3.select(this).attr(\"width\"))/2;\n                            }\n                            else { // second half\n                                newX = event.x - parseFloat(d3.select(this).attr(\"width\"))/2;\n                            }\n                            d3.select(this)\n                                .raise()\n                                .attr('x',\n                                    newX\n                                )/*\n                            d3\n                                .select(this)\n                                .raise()\n                                .attr('x', event.x)\n      \n      \n      \n      \n                        })\n                        .on('end', function dragEnded(){\n      \n                            d3.select(this)\n                                .attr('stroke', null);\n      \n      \n                            //setData(new Map(dataMap))\n                        })\n      \n                )\n            histogram.exit().remove();*/\n    }\n  }, [dataMap, data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"histogram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setData(d => {\n            let newMap = new Map(d);\n            let id = uuidv4();\n            newMap.set(id, element(id));\n            return newMap;\n          });\n        },\n        children: \"ciaoo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setData(d => {\n            let newMap = new Map(d);\n            let id = uuidv4();\n            newMap.set(id, element(id));\n            return newMap;\n          });\n        },\n        children: \"ciaoo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"4vRRe4oTcMVtT8n3L4iG6nZy9CE=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alessandroturnu/Documents/GitHub/histogram-creation/src/App.js"],"names":["React","useRef","useState","useLayoutEffect","useEffect","d3","getRandomColor","v4","uuidv4","element","uuid","value","Math","floor","random","color","transitionDuration","App","svgWidth","svgHeight","dataMap","setDataMap","Map","containerRef","data","setData","console","log","Array","isArray","margin","top","right","bottom","left","width","height","svg","select","append","attr","x","scaleLinear","domain","max","d","range","call","axisBottom","y","axisLeft","translateX","selectAll","enter","i","style","length","newMap","id","set"],"mappings":"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","sourcesContent":["\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction element(uuid){\n        return {\n            uuid,\n            value: Math.floor(Math.random() * 100 + 20), // +20 per evitare la presenza di zeri\n            color: getRandomColor()\n        };\n}\n\nconst transitionDuration = 1000;\n\nfunction App() {\n  const svgWidth = 500;\n  const svgHeight = 300;\n\n  const [dataMap, setDataMap] = useState(new Map());\n  const containerRef = useRef(null);\n\n    //const [data, setData] = useState(d3.range(3).map(x => Math.random()*100));\n    const [data, setData] = useState([10, 20, 30]);\n\n/*\n    useEffect(() => {\n        let initialMap = new Map(dataMap);\n        let id = uuidv4();\n        initialMap.set(id, element(id));\n        id = uuidv4();\n        initialMap.set(id, element(id));\n        id = uuidv4();\n        initialMap.set(id, element(id));\n        setDataMap(initialMap);\n    }, [null]);\n*/\n  useLayoutEffect(() => {\nconsole.log(data)\n    if (Array.isArray(data)) {\n        let margin = {\n            top: 40,\n            right: 30,\n            bottom: 30,\n            left: 40\n        };\n        let width = svgWidth - margin.left - margin.right;\n        let height = svgHeight - margin.top - margin.bottom;\n\n        let svg = d3.select(\"#histogram\")\n            .append('svg')\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.bottom + margin.top)\n            .append('g')\n            .attr('transform', `translate(${margin.left},${margin.top})`)\n      //const histogram = d3.select('svg').selectAll('rect').data(data);\n\n\n        console.log(data)\n\n\n        // get the data\n            // X axis: scale and draw:\n            var x = d3.scaleLinear()\n                .domain([0, d3.max(data, d => d)]) // axis y range\n                .range([0, width]);//data.lenght]); // axis x range\n            svg.append(\"g\")\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\n                .call(d3.axisBottom(x));\n\n            // set the parameters for the histogram\n           /* var histogram = d3.histogram()\n                .value(d => d)   // I need to give the vector of value\n                .domain(x.domain())  // then the domain of the graphic\n                .thresholds(x.ticks(data.lenght)); // then the numbers of bins*/\n\n            // And apply this function to data to get the bins\n           // var bins = histogram(data);\n\n            // Y axis: scale and draw:\n            var y = d3.scaleLinear()\n                .range([0, height])\n                .domain([d3.max(data, d => d), 0])\n            svg.append(\"g\")\n                .call(d3.axisLeft(y));\nconsole.log(\"x\", x, \"y\", y)\n            // append the bar rectangles to the svg element\n            let translateX = x(data[0]);\n\n            svg.selectAll(\"rect\")\n                //.data(bins)\n                .data(data)\n                .enter()\n                .append(\"rect\")\n                .attr(\"x\", 1)\n                .attr(\"transform\", function(d, i) {\n                    console.log(x(i), x(d))\n                    return `translate(${i*translateX}, ${y(d)}`; })\n                .attr(\"width\", function(d) {\n                    return x(d)-20  ; })\n                .attr('value', d=> d)\n                .attr(\"height\", function(d) { return height - y(d); })\n                .style(\"fill\", () => getRandomColor())\n\n\n                .attr(\"width\", (width) / (data.length > 0 ? data.length : 1))\n\n\n\n\n\n\n\n/*\n\n\n      histogram\n          .enter()\n          .append('rect')\n          .merge(histogram)\n          .attr('x', (_, i) => i * svgWidth/(data.length+1) + (100/data.length))\n          .attr('transform', d => `translate(0,${svgHeight-(d.value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n          .attr(\"width\", (svgWidth-100) / (data.length + 1))\n          .attr(\"height\", d => d.value * 300 / svgHeight)\n          .attr('fill', d => d.color)\n          .on('mouseenter', function (actual, i) {\n              d3.select(this)\n                  .attr('opacity', 0.6)\n          })\n          .on('mouseleave', function (actual, i) {\n              d3.select(this)\n                  .attr('opacity', 1)\n          })\n          .on('click', function(actual, data){\n              var response = prompt(\"Change value:\", data.value);\n              if (response == null || response == \"\") {\n                  alert(\"You cancelled the prompt.\");\n                  return;\n              }\n              if(!isNaN(response)){\n                  let value = parseFloat(response);\n\n                  setTimeout(() => {\n                      d3.select(this)\n                          .transition()\n                          .duration(transitionDuration)\n                          .attr('transform', d => `translate(0,${svgHeight-(value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n                          .attr(\"height\", d => value * 300 / svgHeight);\n                  }, 0);\n                  setTimeout(() => {\n                      setData(oldMap => {\n                          let newMap = new Map(oldMap);\n                          newMap.set(data.uuid, {\n                              uuid: data.uuid,\n                              color: data.color,\n                              value: value\n                          })\n                          return newMap;\n                      })\n                  }, transitionDuration);\n                  return;\n              }\n              alert(\"Something went wrong!\");\n          })\n          .call(d3.drag()\n                  .on('start', function dragStarted(){\n                      d3.select(this)\n                          .attr('stroke', 'black');\n                  })\n                  .on('drag', function dragged(event, d){\n\n                      let newX;\n                      // we need to understand where the mouse is, if it is on the first half of the element or on the second one\n                      let elementMiddleX = parseFloat(d3.select(this).attr(\"width\"))/2 + parseFloat(d3.select(this).attr(\"x\")); // middle x of the element dragged\n//TODO aggiustare sfarfallamento\n                      // TODO consulta http://bl.ocks.org/AlessandraSozzi/9aff786dd04515d6b028\n                      if(event.x < (elementMiddleX)) { // first half\n                          newX = event.x - parseFloat(d3.select(this).attr(\"width\"))/2;\n                      }\n                      else { // second half\n                          newX = event.x - parseFloat(d3.select(this).attr(\"width\"))/2;\n                      }\n                      d3.select(this)\n                          .raise()\n                          .attr('x',\n                              newX\n                          )/*\n                      d3\n                          .select(this)\n                          .raise()\n                          .attr('x', event.x)\n\n\n\n\n                  })\n                  .on('end', function dragEnded(){\n\n                      d3.select(this)\n                          .attr('stroke', null);\n\n\n                      //setData(new Map(dataMap))\n                  })\n\n          )\n      histogram.exit().remove();*/\n    }\n  }, [dataMap, data]);\n\n  return (\n      <>\n\n          {/*<svg width={svgWidth} height={svgHeight} ref={containerRef}/>*/}\n\n        <div id=\"histogram\" />\n\n        <div >\n            <button\n                onClick={() => {\n                    setData(d => {\n                        let newMap = new Map(d);\n                        let id = uuidv4();\n                        newMap.set(id, element(id));\n                        return newMap;\n                    })\n                }}>\n                ciaoo\n            </button>\n            <button\n                onClick={() => {\n                    setData(d => {\n                        let newMap = new Map(d);\n                        let id = uuidv4();\n                        newMap.set(id, element(id));\n                        return newMap;\n                    })\n                }}>\n                ciaoo\n            </button>\n        </div>\n\n      </>\n  );\n};\n\nexport default App;\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}