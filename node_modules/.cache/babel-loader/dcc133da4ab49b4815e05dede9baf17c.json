{"ast":null,"code":"var _jsxFileName = \"/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\nimport * as d3 from 'd3';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const svgWidth = 300;\n  const svgHeight = 300;\n  const [data, setData] = useState([20, 10, 30]);\n  const [width, setWidth] = useState(initialWidth);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    function updateWidth() {//setWidth(containerRef.current.clientWidth / (data.length + 1));\n    }\n\n    const handleResize = debounce(updateWidth, 500);\n    updateWidth();\n    window.addEventListener('resize', handleResize);\n    console.log(\"resizing\");\n    return () => window.removeEventListener('resize', handleResize);\n  }, [data.length]);\n  useLayoutEffect(() => {\n    if (Array.isArray(data)) {\n      const histogram = select('svg').selectAll('rect').data(data);\n      histogram.enter().append('rect').merge(histogram).attr('x', (_, i) => i * width / (data.length + 1) + 100 / data.length).attr('transform', d => `translate(0,${100 - d * 2})`) // per allinearli tutti verso il basso\n      .attr(\"width\", (width - 100) / (data.length + 1)).attr(\"height\", d => d * 2).attr('fill', () => getRandomColor());\n      console.log(data);\n      histogram.exit().remove();\n    }\n  }, [data, width]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"50%\",\n      height: svgHeight,\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setData(d => [...d, Math.floor(Math.random() * 30)]);\n        console.log(data);\n      },\n      children: \"ciaoo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.map(i => i + \", \")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"yod1Y1HZD7R5Vezc5PBuQPgF2O8=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js"],"names":["React","useRef","useState","useLayoutEffect","useEffect","debounce","d3","select","getRandomColor","App","svgWidth","svgHeight","data","setData","width","setWidth","initialWidth","containerRef","updateWidth","handleResize","window","addEventListener","console","log","removeEventListener","length","Array","isArray","histogram","selectAll","enter","append","merge","attr","_","i","d","exit","remove","Math","floor","random","map"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nimport React, { useRef, useState, useLayoutEffect, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\nimport * as d3 from 'd3';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\n\nfunction App() {\n  const svgWidth = 300;\n  const svgHeight = 300;\n  const [data, setData] = useState([20, 10, 30]);\n  const [width, setWidth] = useState(initialWidth);\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    function updateWidth() {\n      //setWidth(containerRef.current.clientWidth / (data.length + 1));\n    }\n    const handleResize = debounce(updateWidth, 500);\n    updateWidth();\n    window.addEventListener('resize', handleResize);\n    console.log(\"resizing\");\n    return () => window.removeEventListener('resize', handleResize);\n  }, [data.length]);\n\n  useLayoutEffect(() => {\n    if (Array.isArray(data)) {\n      const histogram = select('svg').selectAll('rect').data(data);\n\n      histogram\n          .enter()\n          .append('rect')\n          .merge(histogram)\n          .attr('x', (_, i) => i * width/(data.length+1) + (100/data.length))\n          .attr('transform', d => `translate(0,${100-d*2})`) // per allinearli tutti verso il basso\n          .attr(\"width\", (width-100) / (data.length + 1))\n          .attr(\"height\", d => d*2)\n          .attr('fill', () => getRandomColor());\n\n      console.log(data);\n      histogram.exit().remove();\n    }\n  }, [data, width]);\n\n  return (\n      <>\n\n        <svg width=\"50%\" height={svgHeight} ref={containerRef}>\n\n        </svg>\n        <button\n          onClick={() => {\n            setData(d => [...d, Math.floor(Math.random() * 30)])\n            console.log(data)\n          }}>\n            ciaoo\n        </button>\n        <div>\n          {data.map(i => i + \", \")}</div>\n      </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}