{"ast":null,"code":"var _jsxFileName = \"/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useLayoutEffect } from 'react';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet i = 0;\n\nlet increment = () => {\n  i++;\n  return i;\n};\n\nfunction element() {\n  return {\n    value: Math.floor(Math.random() * 100),\n    color: getRandomColor()\n  };\n}\n\nfunction App() {\n  _s();\n\n  const svgWidth = 1000;\n  const svgHeight = 300;\n  const [data, setData] = useState(new Map().set(uuidv4(), element()));\n  const containerRef = useRef(null);\n  useLayoutEffect(() => {\n    if (Array.isArray(data)) {\n      const histogram = select('svg').selectAll('rect').data(data);\n      console.log(\"Array:\", data);\n      histogram.enter().append('rect').merge(histogram).attr('x', (_, i) => i * svgWidth / (data.length + 1) + 100 / data.length).attr('transform', d => `translate(0,${svgHeight - d.value * 300 / svgHeight})`) // per allinearli tutti verso il basso\n      .attr(\"width\", (svgWidth - 100) / (data.length + 1)).attr(\"height\", d => d.value * 300 / svgHeight).attr('fill', d => d.color).on('mouseenter', function (actual, i) {\n        select(this).attr('opacity', 0.6);\n      }).on('mouseleave', function (actual, i) {\n        select(this).attr('opacity', 1);\n      }).on('click', (actual, data) => {\n        var response = prompt(\"Change value:\", data.value);\n\n        if (response == null || response == \"\") {\n          alert(\"You cancelled the prompt.\");\n          return;\n        }\n\n        if (!isNaN(response)) {\n          let value = parseFloat(response);\n          setData(oldData => {// code to modify the slot\n            // gestire gli id\n          });\n          return;\n        }\n\n        alert(\"Something went wrong!\");\n      });\n      histogram.exit().remove();\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: svgWidth,\n      height: svgHeight,\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setData(d => [...d, element()]);\n      },\n      children: \"ciaoo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.map(i => i.value + \", \")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"w7yvKDjgjGSwxKeS2mg+ZvHpRf8=\");\n\n_c = App;\n;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alessandroturnu/WebstormProjects/d3_graph/src/App.js"],"names":["React","useRef","useState","useLayoutEffect","select","getRandomColor","v4","uuidv4","i","increment","element","value","Math","floor","random","color","App","svgWidth","svgHeight","data","setData","Map","set","containerRef","Array","isArray","histogram","selectAll","console","log","enter","append","merge","attr","_","length","d","on","actual","response","prompt","alert","isNaN","parseFloat","oldData","exit","remove","map"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,eAAlC,QAAyD,OAAzD;AACA,SAASC,MAAT,QAAuB,IAAvB;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;;AAEA,IAAIC,CAAC,GAAG,CAAR;;AACA,IAAIC,SAAS,GAAG,MAAM;AAClBD,EAAAA,CAAC;AACD,SAAOA,CAAP;AACH,CAHD;;AAIA,SAASE,OAAT,GAAkB;AACV,SAAO;AACHC,IAAAA,KAAK,EAAEC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CADJ;AAEHC,IAAAA,KAAK,EAAEV,cAAc;AAFlB,GAAP;AAIP;;AAED,SAASW,GAAT,GAAe;AAAA;;AACb,QAAMC,QAAQ,GAAG,IAAjB;AACA,QAAMC,SAAS,GAAG,GAAlB;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBlB,QAAQ,CAAC,IAAImB,GAAJ,GAAUC,GAAV,CAAcf,MAAM,EAApB,EAAwBG,OAAO,EAA/B,CAAD,CAAhC;AACA,QAAMa,YAAY,GAAGtB,MAAM,CAAC,IAAD,CAA3B;AAEAE,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIqB,KAAK,CAACC,OAAN,CAAcN,IAAd,CAAJ,EAAyB;AACvB,YAAMO,SAAS,GAAGtB,MAAM,CAAC,KAAD,CAAN,CAAcuB,SAAd,CAAwB,MAAxB,EAAgCR,IAAhC,CAAqCA,IAArC,CAAlB;AACFS,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBV,IAAtB;AACEO,MAAAA,SAAS,CACJI,KADL,GAEKC,MAFL,CAEY,MAFZ,EAGKC,KAHL,CAGWN,SAHX,EAIKO,IAJL,CAIU,GAJV,EAIe,CAACC,CAAD,EAAI1B,CAAJ,KAAUA,CAAC,GAAGS,QAAJ,IAAcE,IAAI,CAACgB,MAAL,GAAY,CAA1B,IAAgC,MAAIhB,IAAI,CAACgB,MAJlE,EAKKF,IALL,CAKU,WALV,EAKuBG,CAAC,IAAK,eAAclB,SAAS,GAAEkB,CAAC,CAACzB,KAAF,GAAU,GAAV,GAAgBO,SAAW,GALjF,EAKqF;AALrF,OAMKe,IANL,CAMU,OANV,EAMmB,CAAChB,QAAQ,GAAC,GAAV,KAAkBE,IAAI,CAACgB,MAAL,GAAc,CAAhC,CANnB,EAOKF,IAPL,CAOU,QAPV,EAOoBG,CAAC,IAAIA,CAAC,CAACzB,KAAF,GAAU,GAAV,GAAgBO,SAPzC,EAQKe,IARL,CAQU,MARV,EAQkBG,CAAC,IAAIA,CAAC,CAACrB,KARzB,EASKsB,EATL,CASQ,YATR,EASsB,UAAUC,MAAV,EAAkB9B,CAAlB,EAAqB;AACnCJ,QAAAA,MAAM,CAAC,IAAD,CAAN,CAAa6B,IAAb,CAAkB,SAAlB,EAA6B,GAA7B;AACH,OAXL,EAYKI,EAZL,CAYQ,YAZR,EAYsB,UAAUC,MAAV,EAAkB9B,CAAlB,EAAqB;AACnCJ,QAAAA,MAAM,CAAC,IAAD,CAAN,CAAa6B,IAAb,CAAkB,SAAlB,EAA6B,CAA7B;AACH,OAdL,EAeKI,EAfL,CAeQ,OAfR,EAeiB,CAACC,MAAD,EAASnB,IAAT,KAAkB;AAE3B,YAAIoB,QAAQ,GAAGC,MAAM,CAAC,eAAD,EAAkBrB,IAAI,CAACR,KAAvB,CAArB;;AACA,YAAI4B,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,IAAI,EAApC,EAAwC;AACpCE,UAAAA,KAAK,CAAC,2BAAD,CAAL;AACA;AACH;;AACD,YAAG,CAACC,KAAK,CAACH,QAAD,CAAT,EAAoB;AAChB,cAAI5B,KAAK,GAAGgC,UAAU,CAACJ,QAAD,CAAtB;AACAnB,UAAAA,OAAO,CAACwB,OAAO,IAAI,CACf;AAGA;AACH,WALM,CAAP;AAMA;AACH;;AACDH,QAAAA,KAAK,CAAC,uBAAD,CAAL;AACH,OAjCL;AAkCAf,MAAAA,SAAS,CAACmB,IAAV,GAAiBC,MAAjB;AACD;AACF,GAxCc,EAwCZ,CAAC3B,IAAD,CAxCY,CAAf;AA0CA,sBACI;AAAA,4BAEE;AAAK,MAAA,KAAK,EAAEF,QAAZ;AAAsB,MAAA,MAAM,EAAEC,SAA9B;AAAyC,MAAA,GAAG,EAAEK;AAA9C;AAAA;AAAA;AAAA;AAAA,YAFF,eAIE;AACE,MAAA,OAAO,EAAE,MAAM;AACbH,QAAAA,OAAO,CAACgB,CAAC,IAAI,CAAC,GAAGA,CAAJ,EAAO1B,OAAO,EAAd,CAAN,CAAP;AACD,OAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAUE;AAAA,gBACGS,IAAI,CAAC4B,GAAL,CAASvC,CAAC,IAAIA,CAAC,CAACG,KAAF,GAAU,IAAxB;AADH;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADJ;AAeD;;GAhEQK,G;;KAAAA,G;AAgER;AAED,eAAeA,GAAf","sourcesContent":["\nimport React, { useRef, useState, useLayoutEffect } from 'react';\nimport { select } from 'd3';\nimport { getRandomColor } from \"./utils/randomColors\";\nimport { v4 as uuidv4 } from 'uuid';\n\nlet i = 0;\nlet increment = () => {\n    i++;\n    return i;\n}\nfunction element(){\n        return {\n            value: Math.floor(Math.random() * 100),\n            color: getRandomColor()\n        };\n}\n\nfunction App() {\n  const svgWidth = 1000;\n  const svgHeight = 300;\n\n  const [data, setData] = useState(new Map().set(uuidv4(), element()));\n  const containerRef = useRef(null);\n\n  useLayoutEffect(() => {\n    if (Array.isArray(data)) {\n      const histogram = select('svg').selectAll('rect').data(data);\n    console.log(\"Array:\", data);\n      histogram\n          .enter()\n          .append('rect')\n          .merge(histogram)\n          .attr('x', (_, i) => i * svgWidth/(data.length+1) + (100/data.length))\n          .attr('transform', d => `translate(0,${svgHeight-(d.value * 300 / svgHeight)})`) // per allinearli tutti verso il basso\n          .attr(\"width\", (svgWidth-100) / (data.length + 1))\n          .attr(\"height\", d => d.value * 300 / svgHeight)\n          .attr('fill', d => d.color)\n          .on('mouseenter', function (actual, i) {\n              select(this).attr('opacity', 0.6)\n          })\n          .on('mouseleave', function (actual, i) {\n              select(this).attr('opacity', 1)\n          })\n          .on('click', (actual, data) => {\n\n              var response = prompt(\"Change value:\", data.value);\n              if (response == null || response == \"\") {\n                  alert(\"You cancelled the prompt.\");\n                  return;\n              }\n              if(!isNaN(response)){\n                  let value = parseFloat(response);\n                  setData(oldData => {\n                      // code to modify the slot\n\n\n                      // gestire gli id\n                  })\n                  return;\n              }\n              alert(\"Something went wrong!\");\n          })\n      histogram.exit().remove();\n    }\n  }, [data]);\n\n  return (\n      <>\n\n        <svg width={svgWidth} height={svgHeight} ref={containerRef} />\n\n        <button\n          onClick={() => {\n            setData(d => [...d, element()])\n          }}>\n            ciaoo\n        </button>\n        <div>\n          {data.map(i => i.value + \", \")}</div>\n      </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}